<div class="grid-margin stretch-card">
  <div class="card">
    <div class="card-body">
      <h4 class="card-title">Order History</h4>
      <div class="table-responsive">
        <table class="table table-hover">
          <thead class="thead-dark">
            <tr>
              <th>Order ID</th>
              <th>User</th>
              <th>Payment Type</th>
              <th>Order Status</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <% order_history.forEach(order => { %>
              <tr class="order-row">
                <td><%= order.orderId %></td>
                <td><%= order.user.username %></td>
                <td><%= order.paymentMethod %></td>
                <td>
                  <span class="badge badge-info"><%= order.orderStatus %></span>
                </td>
                <td>
                  <button class="btn btn-outline-info btn-sm toggle-details-btn" data-order-id="<%= order.orderId %>">
                    Show Details
                  </button>
                </td>
              </tr>
              <tr class="order-details-row" data-order-id="<%= order.orderId %>" style="display:none;">
                <td colspan="5">
                  <div class="order-details p-3 border rounded bg-light">
                    <div class="row">
                      <div class="col-lg-6">
                        <h5>Ordered Products</h5>
                        <% order.items.forEach(item => { 
                            const variant = item.product.variants.find(v => v._id.toString() === item.variantId.toString()); %>
                          <div class="item-details p-2 mb-2 border rounded">
                            <div class="d-flex align-items-center">
                              <img src="/<%= variant.images[0] %>" alt="Product Image" width="60px" class="me-3">
                              <div>
                                <p><strong>Product:</strong> <%= item.product.product_name %></p>
                                <p><strong>Color:</strong> <%= variant.color %>, <strong>Storage:</strong> <%= variant.storage_size %></p>
                              </div>
                            </div>
                            <div class="mt-2">
                              <label><strong>Status:</strong></label>
                              <select class="form-select form-select-sm order-status-dropdown" data-item-id="<%= item._id %>"
                                      <%= item.orderStatus === 'Delivered' || item.orderStatus === 'Cancelled' ? 'disabled' : '' %>>
                                  <% ['Processing', 'Shipped', 'Out for Delivery', 'Delivered', 'Cancelled'].forEach(status => { %>
                                      <option value="<%= status %>" <%= item.orderStatus === status ? 'selected' : '' %>>
                                          <%= status %>
                                      </option>
                                  <% }); %>
                              </select>

                              
                              <% if (item.isReturnRequested) { %>
                                <button class="btn btn-sm mt-2 btn-return-request 
                                              <%= item.isAdminAcceptedReturn === 'Accepted' ? 'btn-success' : 
                                                  item.isAdminAcceptedReturn === 'Rejected' ? 'btn-danger' : 'btn-warning' %>"
                                        data-item-id="<%= item._id %>"
                                        data-reason="<%= item.reasonOfReturn %>"
                                        data-additional-reason="<%= item.additionalReason %>"
                                        <%= item.isAdminAcceptedReturn === 'Accepted' || item.isAdminAcceptedReturn === 'Rejected' ? 'disabled' : '' %>>
                                    <%= item.isAdminAcceptedReturn === 'Accepted' ? 'Return Request Accepted' : 
                                        item.isAdminAcceptedReturn === 'Rejected' ? 'Return Request Rejected' : 'View Return Request' %>
                                </button>
                            <% } %>

                            </div>

                          </div>
                        <% }) %>
                      </div>
                      <div class="col-lg-6">
                        <h5>Shipping Address</h5>
                        <div class="border p-2 rounded bg-white">
                          <p><strong>Name:</strong> <%= order.address.fullName %></p>
                          <p><strong>Address:</strong> <%= order.address.streetAddress %></p>
                          <p><strong>City:</strong> <%= order.address.city %></p>
                          <p><strong>Phone:</strong> <%= order.address.phoneNumber %></p>
                          <p><strong>Email:</strong> <%= order.address.emailAddress %></p>
                        </div>
                      </div>
                    </div>
                  </div>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Return Request Modal -->
<div class="modal fade" id="returnRequestModal" tabindex="-1" aria-labelledby="returnRequestModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="returnRequestModalLabel">Return Request Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p><strong>Reason for Return:</strong> <span id="return-reason"></span></p>
        <p><strong>Additional Reason:</strong> <span id="additional-reason"></span></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" id="accept-return">Accept Return</button>
        <button type="button" class="btn btn-danger" id="decline-return">Decline Return</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<nav aria-label="Page navigation">
  <ul class="pagination justify-content-center">
    <% if (currentPage > 1) { %>
      <li class="page-item">
        <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
          <span aria-hidden="true">&laquo;</span>
        </a>
      </li>
    <% } %>
    <% for (let i = 1; i <= totalPages; i++) { %>
      <li class="page-item <%= currentPage === i ? 'active' : '' %>">
        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
      </li>
    <% } %>
    <% if (currentPage < totalPages) { %>
      <li class="page-item">
        <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
          <span aria-hidden="true">&raquo;</span>
        </a>
      </li>
    <% } %>
  </ul>
</nav>


<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.toggle-details-btn').forEach(button => {
    button.addEventListener('click', function() {
      const orderId = this.dataset.orderId;
      const detailsRow = document.querySelector(`.order-details-row[data-order-id="${orderId}"]`);
      
      detailsRow.style.display = detailsRow.style.display === 'none' || !detailsRow.style.display ? 'table-row' : 'none';
      this.textContent = detailsRow.style.display === 'table-row' ? 'Hide Details' : 'Show Details';
    });
  });

  document.querySelectorAll('.order-status-dropdown').forEach(select => {
    select.addEventListener('change', function() {
      const status = this.value;
      const itemId = this.dataset.itemId;
      const orderId = this.closest('.order-details-row').dataset.orderId; //
      
      Swal.fire({
        title: `Update the product status to "${status}"?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, update it!'
      }).then(result => {
        if (result.isConfirmed) {
          fetch('/admin/update-product-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ itemId, orderId, status })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Updated!', `Product status updated to "${status}".`, '')
                .then(() => location.reload());
            } else {
              Swal.fire('Error!', data.message || 'Failed to update the status. Try again.', 'error');
            }
          })
          .catch(error => {
            Swal.fire('Failed!', 'Unable to update status. Please try again later.', 'error');
          });
        } else {
          this.value = this.dataset.previousStatus;
        }
      });
    });
  });

  // View return request modal
  document.querySelectorAll('.btn-return-request').forEach(button => {
    button.addEventListener('click', function() {
      const reason = this.dataset.reason;
      const additionalReason = this.dataset.additionalReason;
      const itemId = this.dataset.itemId;
      const orderId = button.closest('.order-details-row').dataset.orderId; // Fetch the orderId

      document.getElementById('return-reason').textContent = reason;
      document.getElementById('additional-reason').textContent = additionalReason;
      const returnRequestModal = document.getElementById('returnRequestModal');
      returnRequestModal.dataset.itemId = itemId;
      returnRequestModal.dataset.orderId = orderId;
      $(returnRequestModal).modal('show');
    });
  });

  // Accept return request
  document.getElementById('accept-return').addEventListener('click', function() {
    const itemId = document.getElementById('returnRequestModal').dataset.itemId;
    const orderId = document.getElementById('returnRequestModal').dataset.orderId;
    Swal.fire({
      title: 'Are you sure?',
      text: "You are about to accept this return request!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#28a745',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, accept it!'
    }).then(result => {
      if (result.isConfirmed) {
        fetch('/admin/accept-return-request', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ itemId, orderId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire('Accepted!', 'The return request has been accepted.', 'success')
              .then(() => location.reload());
          } else {
            Swal.fire('Error!', data.message || 'Failed to accept the return request. Try again.', 'error');
          }
        })
        .catch(error => {
          Swal.fire('Failed!', 'Unable to accept the return request. Try again later.', 'error');
        });
      }
    });
  });

  // Decline return request
  document.getElementById('decline-return').addEventListener('click', function() {
    const itemId = document.getElementById('returnRequestModal').dataset.itemId;
    const orderId = document.getElementById('returnRequestModal').dataset.orderId; // Get orderId from modal

    Swal.fire({
      title: 'Are you sure?',
      text: "You are about to decline this return request!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Yes, decline it!'
    }).then(result => {
      if (result.isConfirmed) {
        fetch('/admin/decline-return-request', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ itemId, orderId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire('Declined!', 'The return request has been declined.', 'success')
              .then(() => location.reload());
          } else {
            Swal.fire('Error!', data.message || 'Failed to decline the return request. Try again.', 'error');
          }
        })
        .catch(error => {
          Swal.fire('Failed!', 'Unable to decline the return request. Try again later.', 'error');
        });
      }
    });
  });
});
</script>
